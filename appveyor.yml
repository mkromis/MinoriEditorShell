image: Visual Studio 2017
version: 1.0.{build}
skip_tags: false
configuration: Release

init:
- ps: >-
    $parsedReleaseBuildVersion = $env:APPVEYOR_REPO_TAG_NAME -Match "(\d+.\d+.\d+(.\d+)?)"
    
    if ($env:appveyor_repo_tag -AND $parsedReleaseBuildVersion) {
      $env:BuildVersion = $matches[0]
      $env:IsGithubRelease = $TRUE
    }
    else {
      $env:BuildVersion = $env:appveyor_build_version
      $env:IsGithubRelease = ""
    }
    
    write-host -NoNewline "Build Version: ";
    write-host $env:BuildVersion -foregroundcolor "Yellow";
    
    write-host -NoNewline "Tag name: ";
    write-host $env:appveyor_repo_tag -foregroundcolor "Yellow";
    
    write-host -NoNewline "Commit: ";
    write-host $env:APPVEYOR_REPO_COMMIT_MESSAGE -foregroundcolor "Yellow";
    
    write-host -NoNewline "Commit extended: ";
    write-host $env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED -foregroundcolor "Yellow";
    
    write-host -NoNewline "appveyor_build_version Variable: ";
    write-host $env:appveyor_build_version -foregroundcolor "Yellow";

assembly_info:
  patch: true
  file: '**\AssemblyInfo.*'
  assembly_version: $(BuildVersion)
  assembly_file_version: $(BuildVersion)
  assembly_informational_version: $(BuildVersion)

install:
- ps: .\scripts\install-xna.ps1

cache:
- XNAGS40_setup.exe

before_build:
- cmd: cd src
- cmd: nuget restore
- cmd: cd ..
  
build:
  project: src/Gemini.sln
  publish_nuget: true
  publish_nuget_symbols: false
  verbosity: minimal
  
artifacts:
- path: 'src/Gemini/bin/$(configuration)'
  name: 'Gemini-Binaries'
- path: 'src/Gemini.Modules.CodeCompiler/bin/$(configuration)'
  name: 'Gemini.Modules.CodeCompiler-Binaries'
- path: 'src/Gemini.Modules.CodeEditor/bin/$(configuration)'
  name: 'Gemini.Modules.CodeEditor-Binaries'
- path: 'src/Gemini.Modules.ErrorList/bin/$(configuration)'
  name: 'Gemini.Modules.ErrorList-Binaries'
- path: 'src/Gemini.Modules.GraphEditor/bin/$(configuration)'
  name: 'Gemini.Modules.GraphEditor-Binaries'
- path: 'src/Gemini.Modules.Inspector/bin/$(configuration)'
  name: 'Gemini.Modules.Inspector-Binaries'
- path: 'src/Gemini.Modules.Inspector.MonoGame/bin/$(configuration)'
  name: 'Gemini.Modules.Inspector.MonoGame-Binaries'
- path: 'src/Gemini.Modules.Inspector.Xna/bin/$(configuration)'
  name: 'Gemini.Modules.Inspector.Xna-Binaries'
- path: 'src/Gemini.Modules.MonoGame/bin/$(configuration)'
  name: 'Gemini.Modules.MonoGame-Binaries'
- path: 'src/Gemini.Modules.Output/bin/$(configuration)'
  name: 'Gemini.Modules.Output-Binaries'
- path: 'src/Gemini.Modules.PropertyGrid/bin/$(configuration)'
  name: 'Gemini.Modules.PropertyGrid-Binaries'
- path: 'src/Gemini.Modules.SharpDX/bin/$(configuration)'
  name: 'Gemini.Modules.SharpDX-Binaries'
- path: 'src/Gemini.Modules.Xna/bin/$(configuration)'
  name: 'Gemini.Modules.Xna-Binaries'

deploy:
- provider: GitHub
  release: $(APPVEYOR_REPO_TAG_NAME)
  auth_token:
    secure: gd108UlSNyLViffYS7AKRgbTQXmzI6N/WgtNXFwkOsO9qGrWrAaJ853qAyv+FXp6
  artifact:  /Gemini.*\.zip/
  description: $(APPVEYOR_REPO_TAG_NAME)
  draft: false
  prerelease: false
  on:
    branch: master
    IsGithubRelease: true
- provider: NuGet
  api_key:
    secure: LrIeQprS+E5FzLkdKGYIYHXy/86Kt8YVhTa4J/VhLzGUO+yXnqI+GxDR+K5Wj/VL
  artifact: /.*\.nupkg/
  skip_symbols: false
  on:
    branch: master
    IsGithubRelease: true
