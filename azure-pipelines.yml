# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

name: $(GitVersion.NuGetVersion)

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

pool:
  vmImage: 'windows-latest'

steps:
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet > 5.0.0'
      inputs:
        versionSpec: '> 5.0.0'
        checkLatest: true

    - task: GitVersion@5
      displayName: GitVersion
      inputs:
        updateAssemblyInfo: true
        preferBundledVersion: false

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        arguments: '--collect "XPlat Code Coverage"'

    # copy the Nuget to compression folder
    - task: CopyFiles@2
      displayName: 'Copy Nugets to demo folder'
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '**/*.nupkg'
        TargetFolder: '$(Build.BinariesDirectory)\Minori-$(GitVersion.NuGetVersion)\Nugets'
        flattenFolders: true

    # and to artifacts
    - task: CopyFiles@2
      displayName: 'Copy Nuget Files to artifacts'
      inputs:
        SourceFolder: '$(agent.builddirectory)'
        Contents: '**/*.nupkg'
        TargetFolder: '$(Build.ArtifactStagingDirectory)' 
        flattenFolders: true

    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&tabs=yaml
    - task: CopyFiles@2
      displayName: 'Copy SimpleDemo.WPF Files'
      inputs:
        sourceFolder: Demos/SimpleDemo/SimpleDemo.Wpf/bin/Release
        Contents: |
         *.exe
         *.dll
         *\*.dll
        TargetFolder: '$(Build.BinariesDirectory)/Minori-$(GitVersion.NuGetVersion)/Demos/SimpleDemo'

    - task: CopyFiles@2
      displayName: 'Copy SimpleDemo.RibbonWPF Files'
      inputs:
        sourceFolder: Demos/SimpleDemo/SimpleDemo.RibbonWpf/bin/Release
        Contents: |
         *.exe
         *.dll
         */*.dll
        TargetFolder: '$(Build.BinariesDirectory)/Minori-$(GitVersion.NuGetVersion)/Demos/SimpleDemo'
        OverWrite: true

    - task: CopyFiles@2
      displayName: 'Copy MinoriDemo.WPF Files'
      inputs:
        sourceFolder: Demos/MinoriDemo/MinoriDemo.Wpf/bin/Release
        Contents: |
         *.exe
         *.dll
         */*.dll
        TargetFolder: '$(Build.BinariesDirectory)/Minori-$(GitVersion.NuGetVersion)/Demos/MinoriDemo'

    - task: CopyFiles@2
      displayName: 'Copy MinoriEditorShell.RibbonWPF Files'
      inputs:
        sourceFolder: Demos/MinoriDemo/MinoriDemo.RibbonWpf/bin/Release
        Contents: |
         *.exe
         *.dll
         */*.dll
        TargetFolder: '$(Build.BinariesDirectory)/Minori-$(GitVersion.NuGetVersion)/Demos/MinoriDemo'
        OverWrite: true

    # create demo archive for github
    # Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/archive-files?view=azure-devops
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)\Minori-$(GitVersion.NuGetVersion)' 
        includeRootFolder: true 
        archiveType: '7z' # Options: zip, 7z, tar, wim
        archiveFile: '$(Build.ArtifactStagingDirectory)/Minori-$(GitVersion.NuGetVersion).7z' 
        #verbose: # Optional
        #quiet: # Optional

    # publish staging container
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/artifacts?view=vsts
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'drop' 
        #publishLocation: 'Container' # Options: container, filePath
        #targetPath: # Required when publishLocation == FilePath
        #parallel: false # Optional
        #parallelCount: # Optional
